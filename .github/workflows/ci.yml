name: "CI"

on:
  push:
    branches:
      - master

jobs:
  build-tauri-android:
    runs-on: "ubuntu-24.04"
    env:
      NDK_VERSION: "27.2.12479018"
    strategy:
      fail-fast: false
      matrix:
        arch: ["aarch64", "armv7", "i686", "x86_64"]
    name: Build Android ${{ matrix.arch }}
    steps:
      - name: Setup | Variables
        id: variables
        run: echo "target=${{ matrix.arch }}-linux-android${{ matrix.arch == 'armv7' && 'eabi' || '' }}" >> "$GITHUB_OUTPUT"

      - name: Setup | Checkout
        uses: actions/checkout@v4

      - name: Setup | Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.variables.outputs.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup | Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        if: runner.os == 'Windows'
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
            core.exportVariable('VCPKG_BINARY_SOURCES', 'clear;x-gha,readwrite');

      - name: Setup | Install Rust Stable
        uses: dtolnay/rust-toolchain@stable

      - name: Setup | Install Cargo B(inary)Install
        uses: cargo-bins/cargo-binstall@main

      - name: Setup | Install Trunk
        run: cargo binstall trunk

      - name: Setup | Install WASM Rust Target
        run: rustup target add wasm32-unknown-unknown

      - name: Setup | Set Up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Setup | Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup | Android NDK
        run: sdkmanager --install "ndk;${{ env.NDK_VERSION }}"

      - name: Setup | Android Rust Targets
        run: rustup target add ${{ steps.variables.outputs.target }}

      - name: Setup | Tauri CLI
        run: cargo binstall tauri-cli@2 -y

      - name: Build | Tauri
        env:
          NDK_HOME: /usr/local/lib/android/sdk/ndk/${{ env.NDK_VERSION }}
        run: cargo tauri android build --target ${{ matrix.arch }} --apk

  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "MacOS aarch64"
            target: "aarch64-apple-darwin"
            platform: "macos-14"
            artifacts: |
              zip -vr target/aarch64-apple-darwin/release/bundle/macos/OABS.app.zip target/aarch64-apple-darwin/release/bundle/macos/OABS.app/
              cp -pv target/aarch64-apple-darwin/release/bundle/macos/OABS*.app.zip upload
              cp -pv target/aarch64-apple-darwin/release/bundle/dmg/OABS*.dmg upload

          - name: "MacOS x86_64"
            target: "x86_64-apple-darwin"
            platform: "macos-14"
            artifacts: |
              zip -vr target/x86_64-apple-darwin/release/bundle/macos/OABS.app.zip target/x86_64-apple-darwin/release/bundle/macos/OABS.app/
              cp -pv target/x86_64-apple-darwin/release/bundle/macos/OABS*.app.zip upload
              cp -pv target/x86_64-apple-darwin/release/bundle/dmg/OABS*.dmg upload

          - name: "Linux x86_64 GNU"
            target: x86_64-unknown-linux-gnu
            platform: "ubuntu-24.04"
            install: |
              sudo apt install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libasound2-dev
            artifacts: |
              cp -pv target/x86_64-unknown-linux-gnu/release/bundle/deb/OABS*.deb upload
              cp -pv target/x86_64-unknown-linux-gnu/release/bundle/rpm/OABS*.rpm upload
              cp -pv target/x86_64-unknown-linux-gnu/release/bundle/appimage/OABS*.AppImage upload

          - name: "Windows x86_64"
            target: "x86_64-pc-windows-msvc"
            platform: "windows-2022"
            artifacts: |
              cp -pv target/x86_64-pc-windows-msvc/release/bundle/msi/OABS*.msi upload
              cp -pv target/x86_64-pc-windows-msvc/release/bundle/nsis/OABS*.exe upload

    name: "Build ${{ matrix.name }}"
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4

      - name: Setup | Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.platform }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup | Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        if: runner.os == 'Windows'
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
            core.exportVariable('VCPKG_BINARY_SOURCES', 'clear;x-gha,readwrite');

      - name: Setup | Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup | Install Cargo B(inary)Install
        uses: cargo-bins/cargo-binstall@main

      - name: Setup | Install Trunk
        run: cargo binstall trunk

      - name: Setup | Install Dependencies
        if: matrix.install != ''
        run: ${{ matrix.install }}

      - name: Setup | Install WASM Rust Target
        run: rustup target add wasm32-unknown-unknown

      - name: Setup | Tauri CLI
        run: cargo binstall tauri-cli@2 -y

      - name: Build | Tauri
        run: cargo tauri build --target ${{ matrix.target }}

      - uses: SebRollen/toml-action@v1.2.0
        id: version
        with:
          file: "gui/Cargo.toml"
          field: "package.version"

      - name: Post Build | Move Bundles
        shell: bash
        run: |
          mkdir -p upload
          ${{ matrix.artifacts }}

      - name: Post Build | Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: OABS-${{ matrix.target }}
          path: upload/*
          if-no-files-found: error
