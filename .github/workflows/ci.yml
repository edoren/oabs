name: "CI"

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  build-tauri-android:
    runs-on: "ubuntu-latest"
    env:
      NDK_VERSION: "27.2.12479018"
    strategy:
      fail-fast: false
      matrix:
        arch: ["aarch64", "armv7", "i686", "x86_64"]
    name: Build Android ${{ matrix.arch }}
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4

      - name: Setup | Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup | Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        if: runner.os == 'Windows'
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
            core.exportVariable('VCPKG_BINARY_SOURCES', 'clear;x-gha,readwrite');

      - name: Setup | Install Rust Stable
        uses: dtolnay/rust-toolchain@stable

      - name: Setup | Install Cargo B(inary)Install
        uses: cargo-bins/cargo-binstall@main

      - name: Setup | Install Trunk
        run: cargo binstall trunk

      - name: Setup | Install WASM Rust Target
        run: rustup target add wasm32-unknown-unknown

      - name: Setup | Set Up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Setup | Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup | Android NDK
        run: sdkmanager --install "ndk;${{ env.NDK_VERSION }}"

      - name: Setup | Android Rust Targets
        run: rustup target add ${{ matrix.arch }}-linux-android${{ matrix.arch == 'armv7' && 'eabi' || '' }}

      - name: Setup | Tauri CLI
        run: cargo binstall tauri-cli@2 -y

      - name: Build | Tauri
        env:
          NDK_HOME: /usr/local/lib/android/sdk/ndk/${{ env.NDK_VERSION }}
        run: cargo tauri android build --target ${{ matrix.arch }} --apk

  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "MacOS ARM"
            platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
          - name: "MacOS x64"
            platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
          - name: "Ubuntu"
            platform: "ubuntu-latest"
            args: ""
          - name: "Windows"
            platform: "windows-latest"
            args: ""

    name: "Build ${{ matrix.name }}"
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Setup | Checkout
        uses: actions/checkout@v4
      
      - name: Setup | Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup | Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        if: runner.os == 'Windows'
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
            core.exportVariable('VCPKG_BINARY_SOURCES', 'clear;x-gha,readwrite');

      - name: Setup | Install Rust Stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Setup | Install Cargo B(inary)Install
        uses: cargo-bins/cargo-binstall@main

      - name: Setup | Install Trunk
        run: cargo binstall trunk

      - name: Setup | Install Dependencies (Ubuntu Only)
        if: matrix.name == 'Ubuntu'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libasound2-dev

      - name: Setup | Install WASM Rust Target
        run: rustup target add wasm32-unknown-unknown

      - name: Build | Tauri
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: "./gui"
          # tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          # releaseName: "App v__VERSION__"
          # releaseBody: "See the assets to download this version and install."
          # releaseDraft: true
          # prerelease: false
          args: ${{ matrix.args }}
